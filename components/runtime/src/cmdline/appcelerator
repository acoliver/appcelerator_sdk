#!/usr/bin/env ruby
#
# This file is part of Appcelerator.
#
# Copyright (C) 2006-2008 by Appcelerator, Inc. All Rights Reserved.
# For more information, please visit http://www.appcelerator.org
#
# Appcelerator is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'fileutils'

#
# before we run our main guy, we need to determine if we have an update
# patch file that we need to apply
#
myfile = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
target_dir = File.expand_path File.dirname(myfile)
update_dir = File.join(target_dir,'updates')

if File.exists?(update_dir) and File.directory?(update_dir)
  
  update_file = File.join(update_dir,'update.zip')

  if File.exists?(update_file)
		STDOUT.puts 
		STDOUT.print "+ Performing quick update patch ... one moment "
      dirname = Time.now.strftime '%m%d%Y_%H%M'
      update_dir = File.join(update_dir,dirname)

      # make a backup directory
      FileUtils.mkdir_p update_dir unless File.exists?(update_dir)
      # copy our update into our directory
      update_copy = File.join(update_dir,'update.zip')
      FileUtils.rm_r update_copy if File.exists?(update_copy)
      FileUtils.cp_r update_file, update_copy
      
      update_log = File.open(File.join(update_dir,'update.log'),'w+')
      update_log.puts "Update started at #{Time.now}"
      count = 0

      # unzip update and overwrite any changes and backup
      # any files we need find in our updates directory
		  require 'rubygems'
      require 'zip/zip'
      require 'digest/md5'
      def crc32(c)
          r = 0xFFFFFFFF
          c.each_byte do |b|
              r ^= b
              8.times do
                r = (r>>1) ^ (0xEDB88320 * (r & 1))
              end
          end
          r ^ 0xFFFFFFFF
      end
      Zip::ZipFile.open(update_file) do |zipfile|
        zipfile.each do |entry|
          target = File.join(target_dir,entry.name)
  				if entry.directory?
            update_log.puts "  + Create new directory #{target}"
  					FileUtils.mkdir_p(target) unless File.exists?(target)
  					next
  				end
  				overwrite = false
          if entry.file? and File.exists?(target)
            # backup it up before we overwrite
            backup = File.join(update_dir,entry.name)
  				  if entry.size > 0
  				    # check the CRC for both local file and new patch file
  				    # and only overwrite if the checksums are different
  				    old_checksum = crc32 File.read(target)
  				    new_checksum = entry.crc
  				    overwrite = old_checksum!=new_checksum
  				    if overwrite
                update_log.puts "  * Overwriting existing file, will backup to #{backup}"
                FileUtils.mkdir_p File.dirname(backup) unless File.exists?(File.dirname(backup))
                FileUtils.cp_r target,backup
              end
            else
              overwrite = true
            end
            count+=1 if overwrite
          end
          if overwrite
    				FileUtils.rm_r(target) if File.exists?(target)
    				update_log.puts "  - Deleting #{target}" unless entry.size > 0
    				update_log.puts "  + Adding #{target}" if entry.size > 0
            zipfile.extract(entry, target) if entry.size > 0
          else
            update_log.puts "  = No change detected for #{target}"
          end
        end
      end
      
      # delete our new update
      FileUtils.rm_r update_file
      
      # close our log file, we're done
      update_log.puts "Update completed. #{count} files patched"
      update_log.flush
      update_log.close

		STDOUT.puts "... Update complete! #{count} files patched" if count
		STDOUT.puts "... Update complete!" unless count
		STDOUT.puts
  end

end

# now we can run our main program
require "#{target_dir}/console"

