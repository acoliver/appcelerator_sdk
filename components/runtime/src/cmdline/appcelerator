#!/usr/bin/env ruby
#
# This file is part of Appcelerator.
#
# Copyright (c) 2006-2008, Appcelerator, Inc.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
# 
#     * Neither the name of Appcelerator, Inc. nor the names of its
#       contributors may be used to endorse or promote products derived from this
#       software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

require 'fileutils'

Signal.trap("INT") { puts; exit }

#REQUIRED_GEMS = %w(mongrel rubyzip sqlite3-ruby)
REQUIRED_GEMS = %w(rubyzip)
MYFILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
TARGET_DIR = File.expand_path File.dirname(MYFILE)
UPDATE_DIR = File.join(TARGET_DIR,'updates')
WIN32 = !(RUBY_PLATFORM =~ /(windows|win32)/).nil?
GEM_CMD = WIN32 ? 'gem.bat' : 'gem'
FORCE_INSTALL = ARGV.first == '--force-update'
INSTALLING = ARGV.first == '--install'

def is_gem_installed(gem)
  installed = Gem.cache.search gem
  return !installed.empty?
end

def check_required_gem(gem,array)
  if not is_gem_installed gem
    array << gem
  end
end

def check_for_appadmin
  file = File.expand_path File.join(TARGET_DIR,'appadmin.zip')
  return nil unless File.exists? file

  STDOUT.puts "Installing Appcenter (admin console) ... One moment."
  cmd = "ruby \"#{TARGET_DIR}/console.rb\" install:appadmin \"#{file}\" --no-remote --force"
  system cmd
  STDOUT.puts "Installed ...."
  
  FileUtils.rm_rf file
  exit 0
end

def check_for_initial
  install_file = File.expand_path File.join(TARGET_DIR,'releases','.installed')
  return nil if File.exists? install_file and not INSTALLING
  
  if not WIN32 and not system 'gem --version >/dev/null'
    STDERR.puts "Appcelerator requires RubyGems to be installed and in your path."
    STDERR.puts "Please re-install RubyGems and you will be able to re-run this."
    STDERR.puts "If you have RubyGems already installed, please ensure that it's on your path"
    exit 1
  end
  
  # ensure we have the right gems installed
  gems = []
  
  require 'rubygems'
  
  REQUIRED_GEMS.each do |gem|
    check_required_gem gem,gems
  end
  
#  check_required_gem 'mongrel_service',gems if WIN32
  
  if not gems.empty?
    if not FORCE_INSTALL and not INSTALLING
      STDOUT.puts
      STDOUT.puts "Appcelerator requires the following component#{gems.length > 1 ? 's' : ''}: \n"
      STDOUT.puts
      STDOUT.puts "  > " + gems.join("\n  > ")
      STDOUT.puts
      STDOUT.print "Attempt to auto-install? [Yn] "
      c = STDIN.getc
      if not [10,89,121].include? c
        STDOUT.puts
        STDOUT.puts "Cancelled!"
        exit 1
      end
    end
    
    subprocess = (ARGV.include? '--subprocess')
    gems.each do |gem|
      cmd = "#{GEM_CMD} install #{gem} -y"
      if not WIN32
        cmd = 'sudo ' + cmd
        puts "__MAGIC__|ask|Please enter your password to install required Ruby Gems|true|__MAGIC__" if subprocess
      end
      puts "Executing: #{cmd}"
      system cmd
  
      # NOTE: for some reason, gem doesn't exit with non-zero when unsuccessful
      check_cmd = %x[#{GEM_CMD} list #{gem}]
      
      if not check_cmd =~ Regexp.new('\s'+gem+'\s')
        STDERR.puts "Gem #{gem} doesn't look like it installed correctly."
        exit 1
      end
    end
    
    STDOUT.puts "Dependencies have been successfully installed..."
    STDOUT.puts
    
  end

  # write out our file
  FileUtils.mkdir_p File.join(TARGET_DIR,'releases')
  f = File.new install_file,'w+'
  f.puts Time.now.to_s
  f.close
  
  FileUtils.touch File.join(TARGET_DIR,'releases','config.yml')
  FileUtils.chmod 0666, File.join(TARGET_DIR,'releases','config.yml')

  FileUtils.touch File.join(TARGET_DIR,'releases','login.yml')
  FileUtils.chmod 0666, File.join(TARGET_DIR,'releases','login.yml')

  FileUtils.touch File.join(TARGET_DIR,'build.yml')
  FileUtils.chmod 0666, File.join(TARGET_DIR,'build.yml')
  FileUtils.chmod 0666, File.join(TARGET_DIR,'console.rb')
  
end

check_for_initial

if INSTALLING
  exit 0
end
  
args = ['ruby', TARGET_DIR+'/console.rb'] + ARGV
if exec *args
  exit 0
else
  exit $?.exitstatus
end
