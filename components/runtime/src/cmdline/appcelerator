#!/usr/bin/env ruby
#
# This file is part of Appcelerator.
#
# Copyright (C) 2006-2008 by Appcelerator, Inc. All Rights Reserved.
# For more information, please visit http://www.appcelerator.org
#
# Appcelerator is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'fileutils'

Signal.trap("INT") { puts; exit }

MYFILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
TARGET_DIR = File.expand_path File.dirname(MYFILE)
UPDATE_DIR = File.join(TARGET_DIR,'updates')

def check_for_update
  if File.exists?(UPDATE_DIR) and File.directory?(UPDATE_DIR)
  
    update_file = File.join(UPDATE_DIR,'update.zip')

    if File.exists?(update_file)
  		  STDOUT.puts 
  		  STDOUT.print "+ Performing self-update patch ... one moment "
  		  STDOUT.flush
        dirname = Time.now.strftime '%m%d%Y_%H%M'
        update_dir = File.join(UPDATE_DIR,dirname)

        # make a backup directory
        FileUtils.mkdir_p update_dir unless File.exists?(update_dir)
        # copy our update into our directory
        update_copy = File.join(update_dir,'update.zip')
        FileUtils.rm_r update_copy if File.exists?(update_copy)
        FileUtils.cp_r update_file, update_copy
      
        update_log = File.open(File.join(update_dir,'update.log'),'w+')
        update_log.puts "Update started at #{Time.now}"
        count = 0

        # unzip update and overwrite any changes and backup
        # any files we need find in our updates directory
        require 'rubygems'
        require 'zip/zip'
        require 'digest/md5'
        def crc32(c)
            r = 0xFFFFFFFF
            c.each_byte do |b|
                r ^= b
                8.times do
                  r = (r>>1) ^ (0xEDB88320 * (r & 1))
                end
            end
            r ^ 0xFFFFFFFF
        end
        # these are files that can't be patched
        excludes = %W(#{TARGET_DIR}/build.yml #{TARGET_DIR}/console.rb #{TARGET_DIR}/post-flight.rb)
        Zip::ZipFile.open(update_file) do |zipfile|
          zipfile.each do |entry|
            target = File.join(TARGET_DIR,entry.name)
            if target.to_s == MYFILE
              old_checksum = crc32 File.read(target)
  				    new_checksum = entry.crc            
  				    if new_checksum != old_checksum
  				      STDOUT.puts
  				      STDERR.puts  
  				      STDERR.puts "*" * 80
  				      STDERR.puts "NOTE: you need to download and re-install Appcelerator using the Installer.  A "
  				      STDERR.puts "new version of this script has been detected and a update cannot be applied.  "
  				      STDERR.puts "If you download the latest installer and re-run it, you wil be able to get the "
  				      STDERR.puts "latest updates."
  				      STDERR.puts "*" * 80
  				      STDERR.puts 
  				      # TODO: we should just pull down the latest installer for them 
  				      exit 1
				      end
				      next
  				  end 
            next if excludes.include? target.to_s
            if not File.writable?(target)
              STDERR.puts "Warning: couldn't update #{target} - write permission error"
              next
            end
    				if entry.directory?
              update_log.puts "  + Create new directory #{target}"
    					FileUtils.mkdir_p(target) unless File.exists?(target)
    					next
    				end
    				overwrite = false
            if entry.file? and File.exists?(target)
              # backup it up before we overwrite
              backup = File.join(update_dir,entry.name)
    				  if entry.size > 0
    				    # check the CRC for both local file and new patch file
    				    # and only overwrite if the checksums are different
    				    old_checksum = crc32 File.read(target)
    				    new_checksum = entry.crc
    				    overwrite = old_checksum!=new_checksum
    				    if overwrite
                  update_log.puts "  * Overwriting existing file, will backup to #{backup}"
                  FileUtils.mkdir_p File.dirname(backup) unless File.exists?(File.dirname(backup))
                  FileUtils.cp_r target,backup
                end
              else
                overwrite = true
              end
              count+=1 if overwrite
            end
            if overwrite
      				FileUtils.rm_rf(target) rescue nil
      				update_log.puts "  - Deleting #{target}" unless entry.size > 0
      				update_log.puts "  + Adding #{target}" if entry.size > 0
              zipfile.extract(entry, target) if entry.size > 0
            else
              update_log.puts "  = No change detected for #{target}"
            end
          end
        end
      
        # delete our new update
        FileUtils.rm_r update_file
      
        # close our log file, we're done
        update_log.puts "Update completed. #{count} files patched"
        update_log.flush
        update_log.close

  		STDOUT.puts "... Update complete! #{count} files patched" if count
  		STDOUT.puts "... Update complete!" unless count
  		STDOUT.puts
    end

  end
end

exitcode = 0
cmdappend = ''
count = 0

#
# this logic is rather simple although it might look otherwise
#
# we are going to run our main ruby console.rb file and in a forked 
# sub-process of this process and  wait for exit of sub-process.  
# we're going to check the exit code for the sub-process and if we 
# receive a special exit code - we're going to take that to mean we 
# have an update that needs to be installed
#
# the 1259 exit code means we have an update and we 
# should re-run the exact command again
#
# the 1260 exit code means we have an update and we
# should exit like normal after applying the update
#
# otherwise we exit with whatever code the sub-process gave us
#

check_for_update

FileUtils.cd(TARGET_DIR) do
  while true

    count+=1

    # this is a safety mechanism to not
    # allow this to continue more than twice
    if count > 2
      exitcode = 1
      break
    end
    
    fork do
       exec "ruby console.rb #{ARGV.join(' ')} #{cmdappend}"
    end
    
    Process.wait
    p = $?
    exitcode = p.exitstatus

    case exitcode
      when 1259,1260
        cmdappend = '--after-update-applied'
        check_for_update
        break if exitcode==1260
    else
      break
    end
    
  end
end

exit exitcode

