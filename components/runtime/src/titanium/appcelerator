#!/usr/bin/env ruby
# Copyright 2006-2008 Appcelerator, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. 

require 'fileutils'
# 
Signal.trap("INT") { puts; exit }

def is_gem_installed(gem)
  installed = Gem.cache.search gem
  return !installed.empty?
end

def check_required_gem(gem,array)
  if not is_gem_installed gem
    array << gem
  end
end

def check_for_initial
  $titanium.debug "check_for_initial"
  install_file = home_path 'releases','.installed'
  $titanium.debug "install_file=#{install_file}"
  return nil if File.exists? install_file and not INSTALLING
  
  if not WIN32 and not system 'gem --version >/dev/null'
    msg = "Appcelerator requires RubyGems to be installed and in your path."
    msg += "Please re-install RubyGems and you will be able to re-run this."
    msg += "If you have RubyGems already installed, please ensure that it's on your path"
    $titanium.die msg
    exit 1
  end
  
  # ensure we have the right gems installed
  gems = []
  
  require 'rubygems'
  
  REQUIRED_GEMS.each do |gem|
    check_required_gem gem,gems
  end
  
#  check_required_gem 'mongrel_service',gems if WIN32
  
  if not gems.empty?
    if not FORCE_INSTALL and not INSTALLING
      response = $titanium.confirmInstallComponents("<ul><li>" + gems.join("</li><li>") + "</li></ul>")
      if response == 'Yes'  
        subprocess = (ARGV.include? '--subprocess')
        gems.each do |gem|
          cmd = "#{GEM_CMD} install #{gem} -y"
          if not WIN32
            cmd = 'sudo ' + cmd
            puts "__MAGIC__|ask|Please enter your password to install required Ruby Gems|true|__MAGIC__" if subprocess
          end
          $titanium.info "Executing: #{cmd}"
          system cmd
  
          # NOTE: for some reason, gem doesn't exit with non-zero when unsuccessful
          check_cmd = %x[#{GEM_CMD} list #{gem}]
      
          if not check_cmd =~ Regexp.new('\s'+gem+'\s')
            $titanium.die "Gem #{gem} doesn't look like it installed correctly."
            exit 1
          end
        end
      end
    end
    
    $titanium.info "Dependencies have been successfully installed..."
  end
  
  # write out our file
  FileUtils.mkdir_p File.join(TARGET_DIR,'releases')
  f = File.new install_file,'w+'
  f.puts Time.now.to_s
  f.close
  
  FileUtils.cp File.join(SYSTEMDIR,'build.yml'), home_path('build.yml')
  
  if not WIN32
    # otherwise all files are owned by root on the mac
    %x[sudo id -p] =~ /login\W([^\W]+)/
    real_user = $1
    system("sudo chown -R #{real_user} #{TARGET_DIR}")
  end
end

def check_for_migration
  path = File.join(SYSTEMDIR,'releases','login.yml')
  migration = home_path('releases','.migrated-1.2.0')
  if File.exists? path and not File.exists? migration
    # we need to migrate from old version to new version of runtime
    FileUtils.cp path, home_path('releases','login.yml')
    FileUtils.touch migration
    if File.writable? path
      FileUtils.rm_rf path
    end
  end
end

$titanium = TitaniumBoot.new
REQUIRED_GEMS = %w(rubyzip)
# don't read link for now.. just testing
#MYFILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
MYFILE = __FILE__
SYSTEMDIR = File.expand_path("..", File.dirname(MYFILE))

require File.join(SYSTEMDIR,'lib','util.rb')

TARGET_DIR = home_path
UPDATE_DIR = home_path 'updates'
WIN32 = !(RUBY_PLATFORM =~ /(windows|win32)/).nil?
GEM_CMD = WIN32 ? 'gem.bat' : 'gem'
FORCE_INSTALL = ARGV.first == '--force-update'
INSTALLING = ARGV.first == '--install'

command = $TitaniumOptions['command']
$titanium.debug 'command='+command

$argv = [command]
if command == 'create:project'
  $argv << $TitaniumOptions["dir"]
  $argv << $TitaniumOptions["projectName"]
  $argv << $TitaniumOptions["service"]
end

$titanium.debug "argv=#{$argv}"

#
def titanium_run
 $titanium.debug "run"
 check_for_initial

 if INSTALLING
   exit 0
 end
 
 check_for_migration

 titanium_rb = File.join(SYSTEMDIR, 'titanium', 'titanium.rb')
 if WIN32
   $argv += ['--home', TARGET_DIR, '--system', SYSTEMDIR]
 else
   $argv += ["--home=\"#{TARGET_DIR}\"","--system=\"#{SYSTEMDIR}\""]
 end
 
 $titanium.debug "exec " + titanium_rb
 
 load(titanium_rb)
 
 # if exec *args
 #    exit 0
 #  else
 #    exit $?.exitstatus
 #  end
end

$titanium.debug "about to run"
titanium_run