#
# This file is part of Appcelerator.
#
# Copyright (C) 2006-2008 by Appcelerator, Inc. All Rights Reserved.
# For more information, please visit http://www.appcelerator.org
#
# Appcelerator is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
BUILD_DIR = File.dirname(__FILE__)
require File.expand_path("#{BUILD_DIR}/../build.rb")

task :default=> [:all] do
end

task :all=> [:win32,:unix,:osx] do
  FileUtils.rm_rf "#{STAGE_DIR}/installer"
end

desc 'build win32 installer'
task :win32 do
  puts "==> Building Win32 Installer"
  win32_dir = "#{STAGE_DIR}/installer/win32"
  clean_dir(win32_dir)
  FileUtils.mkdir_p win32_dir 
  build_config = load_config(BUILD_DIR+'/src/installer/win32')
  
  copy_dir "#{BUILD_DIR}/src/cmdline", win32_dir
  copy_dir "#{BUILD_DIR}/src/installer/win32", win32_dir

  FileUtils.cp_r "#{STAGE_DIR}/../LICENSE", win32_dir

  FileUtils.cd(win32_dir) do
    system "makensis installer.nsi" if VERBOSE
    system "makensis -Oinstaller.log installer.nsi" unless VERBOSE
    FileUtils.cp_r "installer.exe", "#{STAGE_DIR}/installer_win32_#{build_config[:version]}.exe"
  end

  FileUtils.rm_rf "#{STAGE_DIR}/installer_win32_#{build_config[:version]}.zip" 
  Zip::ZipFile.open("#{STAGE_DIR}/installer_win32_#{build_config[:version]}.zip", Zip::ZipFile::CREATE) do |zipfile|
	 zipfile.add "installer_win32_#{build_config[:version]}.exe","#{STAGE_DIR}/installer_win32_#{build_config[:version]}.exe"
    zipfile.add 'build.yml',"#{BUILD_DIR}/src/installer/win32/build.yml"
  end

  FileUtils.rm_rf win32_dir
  puts "Win32 Installer is now ready"
end

desc 'build unix installer'
task :unix do
   puts "==> Building Unix Installer"
   unix_dir = "#{STAGE_DIR}/installer/unix"
   clean_dir(unix_dir)
   build_config = load_config(BUILD_DIR+'/src/installer/unix')
   FileUtils.mkdir_p unix_dir 
   
   copy_dir "#{BUILD_DIR}/src/cmdline", unix_dir 
   copy_dir "#{BUILD_DIR}/src/installer/unix", unix_dir 
   
   FileUtils.rm_r "#{unix_dir}/maker"
   FileUtils.rm_r "#{unix_dir}/appcelerator.lsm"
   FileUtils.rm_r "#{unix_dir}/releases" if File.exists? "#{unix_dir}/releases"
   FileUtils.cp_r "#{STAGE_DIR}/../LICENSE", unix_dir

   FileUtils.chmod 0755, "#{unix_dir}/setup.sh"

   system "#{BUILD_DIR}/src/installer/unix/maker/makeself.sh --copy --lsm \"#{BUILD_DIR}/src/installer/unix/appcelerator.lsm\" #{unix_dir} installer.run \"Appcelerator RIA Platform\" ./setup.sh"
   FileUtils.mv "installer.run","#{STAGE_DIR}/installer_unix_#{build_config[:version]}.run"

  FileUtils.rm_rf "#{STAGE_DIR}/installer_unix_#{build_config[:version]}.zip" 
  Zip::ZipFile.open("#{STAGE_DIR}/installer_unix_#{build_config[:version]}.zip", Zip::ZipFile::CREATE) do |zipfile|
	 zipfile.add "installer_unix_#{build_config[:version]}.run","#{STAGE_DIR}/installer_unix_#{build_config[:version]}.run"
    zipfile.add 'build.yml',"#{BUILD_DIR}/src/installer/unix/build.yml"
  end

   FileUtils.rm_rf unix_dir
   puts "Unix Installer is now ready"
end

desc 'build osx installer'
task :osx=> [:stage] do
  puts "==> Building Mac OSX Installer"
  osx_dir = "#{STAGE_DIR}/installer/osx"
  name = "Appcelerator"
  build_config = load_config(BUILD_DIR+'/src/installer/osx')

  clean_dir(osx_dir)
  FileUtils.mkdir_p osx_dir 
  FileUtils.mkdir_p "#{osx_dir}/installer/build/osx"

  copy_dir "#{BUILD_DIR}/src/cmdline", "#{osx_dir}/installer" 
  copy_dir "#{BUILD_DIR}/src/installer/osx", "#{osx_dir}/installer/build/osx"

  # dynamically make our list of files into the pmdoc before we build
  make_pkg_file "#{osx_dir}/installer/build/osx/installer.pmdoc/05commands-contents.xml","#{osx_dir}/installer/commands"
  make_pkg_file "#{osx_dir}/installer/build/osx/installer.pmdoc/06lib-contents.xml","#{osx_dir}/installer/lib"

  index = File.read "#{osx_dir}/installer/build/osx/installer.pmdoc/index.xml"
 
  file = File.open "#{osx_dir}/installer/build/osx/installer.pmdoc/index.xml",'w+'
  file.puts index.gsub(/<build>(.*?)<\/build>/,"<build>#{osx_dir}/installer/installer.mpkg</build>")
  file.close
  
  Dir["#{osx_dir}/installer/build/osx/installer.pmdoc/**/*.xml"].each do |file|
    f = File.open(file,'r+')
    c = f.read
    f.rewind
    c.gsub!(/ o="(.*?)"/," o=\"root\"")
    c.gsub!(/ g="(.*?)"/," g=\"admin\"")
    f.puts c
    f.close
  end
  
  # build the package structure
  if File.exists? "/Developer/Tools/packagemaker"
    STDERR.puts "ERROR: Cannot build Mac OSX Installer using xcode version < 3.0. Please upgrade to the latest xcode."
    exit 1
  elsif File.exists? "/Developer/usr/bin/packagemaker"
  	system "/Developer/usr/bin/packagemaker --target 10.4 --doc #{osx_dir}/installer/build/osx/installer.pmdoc --out #{osx_dir}/installer/#{name}.mpkg"
  else
	  STDERR.puts "ERROR: Couldn't find xcode packagemaker"
    exit 1
  end

  # add in our postflight install script
  postflight = File.open "#{osx_dir}/installer/#{name}.mpkg/Contents/Packages/lib.pkg/Contents/Resources/postflight",'w+'
  postflight.puts "#!/bin/sh"
  postflight.puts "/usr/bin/appcelerator '--postflight--'"
  postflight.puts "exit 0"
  postflight.close
  FileUtils.chmod 0755, "#{osx_dir}/installer/#{name}.mpkg/Contents/Packages/lib.pkg/Contents/Resources/postflight"
  
  # create our DMG file
  #FileUtils.rm_rf "#{STAGE_DIR}/installer_osx_#{build_config[:version]}.dmg" 


  #system "hdiutil convert #{osx_dir}/installer/build/osx/Appcelerator.dmg -format UDSP -o #{osx_dir}/installer/build/osx/Appcelerator" 
  #system "hdiutil mount #{osx_dir}/installer/build/osx/Appcelerator.sparseimage"
  #FileUtils.mkdir_p "#{osx_dir}/installer/build/osx/newinstaller/Appcelerator"
  #FileUtils.cp_r "/Volumes/Appcelerator","#{osx_dir}/installer/build/osx/newinstaller/Appcelerator"

  #FileUtils.cd("#{osx_dir}/installer/build/osx") do
  #	system "unzip installer.zip -d out"
  #end
  FileUtils.mkdir_p "#{osx_dir}/installer/build/osx/installer"
  system "hdiutil convert #{osx_dir}/installer/build/osx/Appcelerator.dmg -format UDSP -o #{osx_dir}/installer/build/osx/installer/Appcelerator"
  system "hdiutil mount #{osx_dir}/installer/build/osx/installer/Appcelerator.sparseimage"
  
  FileUtils.cp_r "#{osx_dir}/installer/#{name}.mpkg/Contents", "/Volumes/Appcelerator/Run Installer.mpkg"
  FileUtils.cp_r "#{osx_dir}/installer/build/osx/README", "/Volumes/Appcelerator/Read Me.txt"
  system "hdiutil eject /Volumes/Appcelerator"
  system "hdiutil convert #{osx_dir}/installer/build/osx/installer/Appcelerator.sparseimage -format UDBZ -o #{osx_dir}/Appcelerator.dmg"

  FileUtils.rm_r "#{STAGE_DIR}/installer_osx_#{build_config[:version]}.dmg"
  system "hdiutil convert -format UDZO -imagekey zlib-level=9 -o #{STAGE_DIR}/installer_osx_#{build_config[:version]}.dmg #{osx_dir}/Appcelerator.dmg"

  #system "hdiutil convert -format UDZO -imagekey zlib-level=9 -o #{STAGE_DIR}/installer_osx_#{build_config[:version]}.dmg #{osx_dir}/#{name}_tmp.dmg"

  FileUtils.rm_rf "#{STAGE_DIR}/installer_osx_#{build_config[:version]}.zip" 
  Zip::ZipFile.open("#{STAGE_DIR}/installer_osx_#{build_config[:version]}.zip", Zip::ZipFile::CREATE) do |zipfile|
	 zipfile.add "installer_osx_#{build_config[:version]}.dmg","#{STAGE_DIR}/installer_osx_#{build_config[:version]}.dmg"
    zipfile.add 'build.yml',"#{BUILD_DIR}/src/installer/osx/build.yml"
  end

  FileUtils.rm_rf osx_dir
  puts "Mac OSX Installer is now ready"
end

#
# make a package file xml based on listing of files in directory
#
def build_pkg_contents(dir,indent=0)
  files = []
  files << " " * indent + "<f n=\"#{File.basename(dir)}\" o=\"root\" g=\"admin\" p=\"33188\">"
  Dir["#{dir}/*"].each do |path|
    pathname = Pathname.new(path)
    if not path.include? '.svn'
      if pathname.file?
        filename = pathname.relative_path_from(Pathname.new(dir))
        files << " " * (indent + 3) + "<f n=\"#{filename}\" o=\"root\" g=\"admin\" p=\"33188\"/>"
      elsif pathname.directory?
        files.concat build_pkg_contents(pathname.to_s,indent+3)
      end
    end
  end
  files << " " * indent + "</f>"
  files
end

def make_pkg_file(file,dir)
   f = File.open file,'w+'
  f.puts "<?xml version=\"1.0\"?>"
  f.puts "<pkg-contents spec=\"1.12\">"
  f.puts build_pkg_contents(dir) 
  f.puts "</pkg-contents>"
  f.close
end
