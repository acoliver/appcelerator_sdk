#
#
# This file is part of Appcelerator.
#
# Copyright (c) 2006-2008, Appcelerator, Inc.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
# 
#     * Neither the name of Appcelerator, Inc. nor the names of its
#       contributors may be used to endorse or promote products derived from this
#       software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

def path(*args) File.expand_path(*args) end
mule_service_dir = File.dirname(__FILE__)
java_service_dir = path("../java", mule_service_dir)

require path("#{mule_service_dir}/../../build.rb")
require path('common.rb', java_service_dir)

config = load_config(mule_service_dir)
java_config = load_config(java_service_dir)

desc 'default mule build'

task :default do
  mule_stage_dir = path('mule', STAGE_DIR)
  app_source = path('src', java_service_dir)
  app_mule_source = path('src', mule_service_dir)

  lib_dir = path('lib', mule_service_dir) # necessary to build -mule.jar
 
  clean_dir(mule_stage_dir)
  FileUtils.mkdir_p to_path(mule_stage_dir) 

  # build the latest appcelerator.jar for this release
  java_cp_dir = path('lib', java_service_dir)
  compile_dir(app_source, mule_stage_dir, java_cp_dir)
  app_jar_file = path("appcelerator-#{java_config[:version]}.jar", lib_dir)
  create_jar(app_jar_file, mule_stage_dir)

  # clean
  clean_dir(mule_stage_dir)
  FileUtils.mkdir_p to_path(mule_stage_dir) 

  # now create an appcelerator-mule.jar file
  compile_dir(app_mule_source, mule_stage_dir, [lib_dir, java_cp_dir])
  mule_jar_file = path("appcelerator-mule-#{config[:version]}.jar", lib_dir)
  FileUtils.cp_r(path('META-INF', app_mule_source), mule_stage_dir)
  create_jar(mule_jar_file, mule_stage_dir)

  zipfile = path("service_mule_#{config[:version]}.zip", STAGE_DIR)
  FileUtils.rm_rf zipfile
  Zip::ZipFile.open(zipfile, Zip::ZipFile::CREATE) do |zipfile|

    dist_dir = path('dist', mule_service_dir) 
    dofiles(dist_dir) do |f|
      if not f == '.'
        zipfile.add("dist/#{f}", "#{dist_dir}/#{f}")
      end
    end

    dofiles(lib_dir) do |f|
      if not f == '.'
        zipfile.add("dist/public/WEB-INF/lib/#{File.basename(f)}", "#{lib_dir}/#{f}")
      end
    end

    Dir["#{java_cp_dir}/**/*.jar"].each { |f|
        zipfile.add("dist/public/WEB-INF/lib/#{File.basename(f)}", f)
    }

    zipfile.add("build.yml", "build.yml")
    zipfile.add("install.rb", "install.rb")
  end

  # do some cleanup
  FileUtils.rm_rf(app_jar_file)
  FileUtils.rm_rf(mule_jar_file)
  FileUtils.rm_rf(mule_stage_dir)
end

