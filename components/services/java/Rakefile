#
#
# This file is part of Appcelerator.
#
# Copyright (c) 2006-2008, Appcelerator, Inc.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
# 
#     * Neither the name of Appcelerator, Inc. nor the names of its
#       contributors may be used to endorse or promote products derived from this
#       software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

BUILD_DIR = File.dirname(__FILE__)
require File.expand_path("#{BUILD_DIR}/../../build.rb")
require "common.rb"

build_config = load_config(BUILD_DIR)

desc 'default java build'

task :default do
  java_dir = File.expand_path "#{STAGE_DIR}/java"
  java_classes = File.expand_path "#{java_dir}/classes"
  java_source = File.expand_path "#{BUILD_DIR}/src"
 
  clean_dir(java_dir)
  
  FileUtils.mkdir_p to_path(java_classes)
  FileUtils.mkdir_p File.join(java_dir,'dist') rescue nil
  FileUtils.mkdir_p File.join(java_dir,'dist','lib') rescue nil

  copy_dir "#{BUILD_DIR}/lib", File.join(java_dir,'dist','lib')
  copy_dir "#{BUILD_DIR}/installer", File.join(java_dir,'dist')
  
  # 
  # FIXME
  #
  # FileUtils.copy("#{BUILD_DIR}/java/build.xml",File.join(java_dir,'dist'))
  # FileUtils.copy("#{BUILD_DIR}/java/build.properties",File.join(java_dir,'dist'))
  # FileUtils.copy("#{BUILD_DIR}/java/appcelerator.xml",File.join(java_dir,'dist','src','web'))
  # FileUtils.copy("#{BUILD_DIR}/java/web.xml",File.join(java_dir,'dist','src','web','WEB-INF'))
  # FileUtils.copy("#{BUILD_DIR}/java/spring-beans.xml",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/appcelerator.properties",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/appcelerator.log4j.properties",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/spring-beans.xml",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/SampleService.java",File.join(java_dir,'dist','src','java'))
  # FileUtils.copy("#{BUILD_DIR}/installer/build/java/install.rb",File.join(java_dir,'dist'))
  # FileUtils.copy("#{BUILD_DIR}/installer/build/java/war.rb",File.join(java_dir,'dist'))
  
  compile_dir(java_source, java_classes, "#{BUILD_DIR}/lib")

  f = File.open "#{java_dir}/dist/build.yml", 'w+'
  f.puts build_config.to_yaml
  f.close

  java_dist = File.expand_path "#{java_dir}/dist/lib"
  FileUtils.mkdir_p "#{java_dist}" unless File.exists? "#{java_dist}"

  jar_file = File.expand_path("appcelerator.jar","#{java_dist}")
  create_jar(jar_file, java_classes)

  FileUtils.cd(java_classes) do

 #    cl = []
 #    Find.find(java_classes) do |path|
 #     f = File.expand_path path
 #     next if File.directory?(f)
 #     fn = f.gsub(java_classes+'/','')
 #     cl << fn
 #    end
  
     zipfile = File.expand_path "#{STAGE_DIR}/service_java_#{build_config[:version]}.zip"
     FileUtils.rm_rf zipfile
     
     excludes = %w(lib/optional/spring-2.5.1.jar lib/optional/ant-1.7.0.jar lib/optional/cglib-2.1.3.jar lib/optional/junit.jar)
     
     Zip::ZipFile.open(zipfile, Zip::ZipFile::CREATE) do |zipfile|
      dofiles("#{java_dir}/dist") do |f|
        filename = f.to_s
        if not filename == '.' and not excludes.include? filename
          zipfile.add(filename,"#{java_dir}/dist/#{filename}")
        end
      end
      zipfile.add('app/services/org/appcelerator/test/EchoService.java',"#{java_source}/org/appcelerator/test/EchoService.java")
    end
  end
  FileUtils.rm_rf java_dir
end
