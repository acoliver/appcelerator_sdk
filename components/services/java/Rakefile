#
# This file is part of Appcelerator.
#
# Copyright (C) 2006-2008 by Appcelerator, Inc. All Rights Reserved.
# For more information, please visit http://www.appcelerator.org
#
# Appcelerator is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

BUILD_DIR = File.dirname(__FILE__)
require File.expand_path("#{BUILD_DIR}/../../build.rb")
build_config = load_config(BUILD_DIR)

desc 'default java build'
task :default do
  java_dir = File.expand_path "#{STAGE_DIR}/java"
  java_classes = File.expand_path "#{java_dir}/classes"
  java_source = File.expand_path "#{BUILD_DIR}/src"
  
  clean_dir(java_dir)
  
  FileUtils.mkdir_p to_path(java_classes)
  FileUtils.mkdir_p File.join(java_dir,'dist') rescue nil
  FileUtils.mkdir_p File.join(java_dir,'dist','lib') rescue nil

  copy_dir "#{BUILD_DIR}/lib", File.join(java_dir,'dist','lib')
  copy_dir "#{BUILD_DIR}/installer", File.join(java_dir,'dist')
  
  # 
  # FIXME
  #
  # FileUtils.copy("#{BUILD_DIR}/java/build.xml",File.join(java_dir,'dist'))
  # FileUtils.copy("#{BUILD_DIR}/java/build.properties",File.join(java_dir,'dist'))
  # FileUtils.copy("#{BUILD_DIR}/java/appcelerator.xml",File.join(java_dir,'dist','src','web'))
  # FileUtils.copy("#{BUILD_DIR}/java/web.xml",File.join(java_dir,'dist','src','web','WEB-INF'))
  # FileUtils.copy("#{BUILD_DIR}/java/spring-beans.xml",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/appcelerator.properties",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/appcelerator.log4j.properties",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/spring-beans.xml",File.join(java_dir,'dist','src','web','WEB-INF','classes'))
  # FileUtils.copy("#{BUILD_DIR}/java/SampleService.java",File.join(java_dir,'dist','src','java'))
  # FileUtils.copy("#{BUILD_DIR}/installer/build/java/install.rb",File.join(java_dir,'dist'))
  # FileUtils.copy("#{BUILD_DIR}/installer/build/java/war.rb",File.join(java_dir,'dist'))
  # 
  
  puts "Compiling Java files..." if VERBOSE
   
  cp = Dir["#{BUILD_DIR}/lib/**/*.jar"].inject([]) {|a,f| a<<to_path(f) }
  FileUtils.cd(java_source) do
    src = Dir["**/*.java"].inject([]) {|a,f| a<<to_path(f) }
    src.delete_if {|f| f =~ /EchoService.java$/ }

    FileUtils.mkdir_p "#{java_classes}" unless File.exists? "#{java_classes}"
    call_command "javac -verbose -g -cp #{cp.join(java_path_separator)} #{src.join(' ')} -target 1.5 -d #{to_path(java_classes)}"
  end
  f = File.open "#{java_dir}/dist/build.yml", 'w+'
  f.puts build_config.to_yaml
  f.close
  java_dist = File.expand_path "#{java_dir}/dist/lib"
  FileUtils.mkdir_p "#{java_dist}" unless File.exists? "#{java_dist}"
  FileUtils.cd(java_classes) do
     cl = []

 #    Find.find(java_classes) do |path|
 #     f = File.expand_path path
 #     next if File.directory?(f)
 #     fn = f.gsub(java_classes+'/','')
 #     cl << fn
 #    end
     jar_file = File.expand_path("appcelerator.jar","#{java_dist}")
     if is_win32
       call_command "jar cvf #{jar_file} ."
      else
       system "jar cvf #{jar_file} ." if VERBOSE
       system "jar cvf #{jar_file} . >/dev/null" unless VERBOSE
     end
  
     zipfile = File.expand_path "#{STAGE_DIR}/service_java_#{build_config[:version]}.zip"
     FileUtils.rm_rf zipfile
     
     excludes = %w(lib/optional/spring-2.5.1.jar lib/optional/ant-1.7.0.jar lib/optional/cglib-2.1.3.jar lib/optional/junit.jar)
     
     Zip::ZipFile.open(zipfile, Zip::ZipFile::CREATE) do |zipfile|
      dofiles("#{java_dir}/dist") do |f|
        filename = f.to_s
        if not filename == '.' and not excludes.include? filename
          zipfile.add(filename,"#{java_dir}/dist/#{filename}")
        end
      end
      zipfile.add('app/services/org/appcelerator/test/EchoService.java',"#{java_source}/org/appcelerator/test/EchoService.java")
    end
  end
  FileUtils.rm_rf java_dir
end
