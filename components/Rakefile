#
# This file is part of Appcelerator.
#
# Copyright 2006-2008 Appcelerator, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
BUILD_DIR = File.expand_path(File.dirname(__FILE__))
ROOT_DIR = File.join(BUILD_DIR, '..')

require File.join(ROOT_DIR, 'build', 'build.rb')

SERVICES_DIR = File.join(BUILD_DIR, 'services')
BEHAVIORS_DIR = File.join(BUILD_DIR, 'behaviors')
CONTROLS_DIR = File.join(BUILD_DIR, 'controls')
LAYOUTS_DIR = File.join(BUILD_DIR, 'layouts')
WIDGETS_DIR = File.join(BUILD_DIR, 'widgets')
THEMES_DIR = File.join(BUILD_DIR, 'themes')
WEBSDK_DIR = File.join(BUILD_DIR, 'websdk')
RUNTIME_DIR = File.join(BUILD_DIR, 'runtime')

require File.join('runtime', 'Rakefile.rb')

task :default => [:all] do
end

task :cleanup do
	Dir["**/*.zip"].each do |zip|
		FileUtils.rm_rf zip
   end
end

task :all => %w(widget:all layout:all behavior:all control:all theme:all service:all websdk:all runtime:all plugin:all) do
end

namespace :websdk do
  desc "Build the websdk"
  task :all do
    FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
      call_rake "test" # test depends on default
    end
  end
  
  task :test do
    FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
     call_rake " test"
    end
  end
  
  desc "Run the default set of tests (requires JAVA)"
  task :test => 'test:default'
  namespace :test do
    task :default do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " test"
        end
    end
      
    task :webunit do 
      FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
        call_rake " test"
      end
    end
    
    namespace :selenium do 
      task :start do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " selenium:start"
        end
      end
      
      task :stop do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " selenium:stop"
        end
      end
      
      task :all do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " selenium:all"
        end
      end
      
      task :firefox do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " selenium:firefox"
        end
      end
      
      task :safari do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " selenium:safari"
        end
      end
      
      task :ie do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " selenium:ie"
        end
      end
    end
    
    namespace :webrick do 
      task :start do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " webrick:start"
        end
      end
      
      task :stop do 
        FileUtils.cd("#{BUILD_DIR}/websdk") do |d|
          call_rake " webrick:stop"
        end
      end
    end
  end
end

def all_task(nspace)
    task :all do
        tasks = Rake.application.tasks.each { |t|
           if t.name.include?(nspace) and not t.name.include?(':all')
             puts "\nBuilding #{t.name}"
             Rake::Task["#{t.name}"].invoke
           end
        }
    end
end

def directory_to_namespace(types, dir, i=0, nspace="")
  return directory_to_namespace([types], dir) if types.class != Array

  if i < types.length
      namespace types[i] do
          nspace = "#{nspace}#{types[i].to_s}:"
          directory_to_namespace(types, dir, i + 1, nspace)
          all_task(nspace)
      end
      return
  end

  dirs = Dir["#{dir}/*"].reject { |f| not File.directory?(f) }
  dirs.each { |subdir|
    subdir = File.expand_path(subdir)
    rfile = File.join(subdir, 'Rakefile.rb')
    name = File.basename(subdir).to_sym

    if File.exists?(rfile) # first try Rakefile.rb in directory
        require rfile

    else # otherwise try a simple build
        task name do
            config = get_config(types, name)
            build_simple_component(config, subdir)
        end
    end

    # inject config afterward
    Rake::Task["#{nspace}#{name}"].enhance do
        config = get_config(types, name)
        add_config_to_zip(config)
    end

  }
end

directory_to_namespace(:service, SERVICES_DIR)
directory_to_namespace(:behavior, BEHAVIORS_DIR)
directory_to_namespace(:control, CONTROLS_DIR)
directory_to_namespace(:layout, LAYOUTS_DIR)
directory_to_namespace(:widget, WIDGETS_DIR)

directory_to_namespace([:theme, :layout], File.join(THEMES_DIR, "layouts"))
directory_to_namespace([:theme, :behavior], File.join(THEMES_DIR, "behaviors"))
directory_to_namespace([:theme, :control], File.join(THEMES_DIR, "controls"))


def build_simple_component(config, dir)
  name = config[:name]

  if config[:licenses].nil? or config[:licenses].empty?
    STDERR.puts "Before you can build the control, you need to set the licensing type."
    STDERR.puts "Please see LICENSING.readme file for details or visit the documentation"
    STDERR.puts "for more information."
    exit 1
  end

  output_file = config[:output_filename]
  FileUtils.rm_f(output_file)

  Zip::ZipFile.open(output_file, Zip::ZipFile::CREATE) do |zipfile|
    src_path = Pathname.new(dir)

    Find.find(dir) do |path|
      pathname = Pathname.new(path)

      next if path.include? '.svn'
      next if path.include? 'Rakefile'
      next if path.include? 'LICENSING.readme'
      next if not pathname.file?

      filename = pathname.relative_path_from(src_path)
      if path.include? "#{name}.js"
        zipfile.get_output_stream(filename) do |f|
          c = File.read(path)
          f.puts(c.gsub('__VERSION__', config[:version]))
        end
      else
        zipfile.add(filename, path)
      end
    end
  end

  # TODO: inline this at some point
  compress_js_in_zip(output_file)

end
