#
# This file is part of Appcelerator.
#
# Copyright (C) 2006-2008 by Appcelerator, Inc. All Rights Reserved.
# For more information, please visit http://www.appcelerator.org
#
# Appcelerator is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

BUILD_DIR = File.dirname(__FILE__)
require File.expand_path("#{BUILD_DIR}/../build.rb")
build_config = load_config(BUILD_DIR)

desc 'build websdk files'
task :default do
  web_dir = "#{STAGE_DIR}/websdk"
  js_dir = "#{web_dir}/js"
  js_source = "#{BUILD_DIR}/src/js"

  clean_dir(web_dir)

  FileUtils.mkdir_p js_dir

  puts 'Compiling appcelerator-lite.js...' if VERBOSE
  # files that need to be included before the others in the directory
  jslite_prefiles = %w(core.js debug.js string.js object.js datetime.js config.js compiler.js dom.js cookie.js servicebroker.js types.js)
  jslite = js_dir+'/appcelerator-lite.js'
  
  LICENSE_HEADER=<<END_LICENSE
/*
 * This file is part of Appcelerator.
 *
 * Copyright (C) 2006-2008 by Appcelerator, Inc. All Rights Reserved.
 * For more information, please visit http://www.appcelerator.org
 *
 * Appcelerator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
END_LICENSE

  append_file(LICENSE_HEADER,jslite,true)
  
  rel = build_config[:version].to_s.split('.')

  # fix the release information in the file
  bf = File.read(js_source+'/bootstrap.js')
  bf.gsub!('${version.major}',rel[0])
  bf.gsub!('${version.minor}',rel[1])
  bf.gsub!('${version.rev}',rel[2]||'0')
  append_file(bf,jslite,true)

  jslite_prefiles.each do |file|
    append_file(js_source+'/'+file, jslite)
  end

  # other files to avoid automatically adding
  EXCLUDED_FILES = jslite_prefiles + %w(bootstrap.js prolog.js epilog.js)
  
  def not_already_included(path)
    not EXCLUDED_FILES.find{ |excluded_file| path.include? excluded_file }
  end

  js_files = Dir["#{js_source}/*.js"].select{|path| not_already_included path}
  # don't filter out excluded files from subdirs,
  # because we have some duplicate filenames
  js_files += Dir["#{js_source}/*/*.js"]
  
  # must sort after including subdirs
  js_files.sort.each {|path| append_file(path, jslite) }
  append_file("#{js_source}/epilog.js", jslite)

  puts 'Compiling appcelerator-debug.js...' if VERBOSE
  
  jsdebug = js_dir+'/appcelerator-debug.js'
  append_file(LICENSE_HEADER,jsdebug,true)
  append_file("\n/* The following files are subject to license agreements by their respective license owners */\n", jsdebug, true)
  append_file(js_source+'/prolog.js', jsdebug)
  thirdparty = %w(prototype/prototype.js scriptaculous/scriptaculous.js scriptaculous/effects.js scriptaculous/dragdrop.js scriptaculous/resizable.js)
  thirdparty.each do |file|
    append_file(BUILD_DIR+'/lib/'+file, jsdebug)
  end
  append_file("\n/* END THIRD PARTY SOURCE */\n", jsdebug, true)
  append_file(jslite, jsdebug)
  
  puts 'Compiling appcelerator.js...' if VERBOSE
  jsout = js_dir+'/appcelerator.js'
  jstemp = js_dir+'/appcelerator-temp.js'
  

  # comment out load for scriptaculous - we don't want that to run since we
  # auto include them already
  jsd = File.read(jsdebug)
  jsd.gsub!('Scriptaculous.load();','')
  jsdf = File.open(jsdebug,'w+')
  jsdf.write jsd
  jsdf.close
  
  # Make the compressors quiet, but if a fatal error occurs, display output
  require 'tempfile'
  require 'tmpdir'
  ERROR_TEMP_FILE = Tempfile.new('websdk').path
   
  if VERBOSE
    SUPPRESS_OUTPUT = ""
  else
    SUPPRESS_OUTPUT = ">#{ERROR_TEMP_FILE} 2>&1"
  end
  
  def compress_fail
    if not VERBOSE
      puts File.read(ERROR_TEMP_FILE)
    end
    fail("Syntax error in websdk source, unable to compress")
  end

  YUI_COMPRESSOR = "java -jar #{BUILD_DIR}/lib/yuicompressor-2.2.5.jar"
  COMPRESS_RB = "ruby #{BUILD_DIR}/lib/compress.rb"
  
  puts "Compressing appcelerator.js"
  system("#{YUI_COMPRESSOR} #{jsdebug} -o #{jsout} #{SUPPRESS_OUTPUT}") || compress_fail
  system("#{COMPRESS_RB} #{jsout} #{jstemp} #{SUPPRESS_OUTPUT}") || compress_fail
  FileUtils.rm jsout
  append_file(LICENSE_HEADER, jsout, true)
  append_file(jstemp, jsout)
  FileUtils.rm jstemp

  system("#{YUI_COMPRESSOR} #{jslite} -o #{jstemp} #{SUPPRESS_OUTPUT}") || compress_fail
  system("#{COMPRESS_RB} #{jstemp} #{jslite} #{SUPPRESS_OUTPUT}") || compress_fail
  FileUtils.rm jstemp
  append_file(LICENSE_HEADER, jstemp, true)
  append_file(jslite, jstemp)
  FileUtils.rm jslite
  append_file(jstemp, jslite)
  FileUtils.rm jstemp

  puts "Archiving JS/Web files..." if VERBOSE
  zipfile = "#{STAGE_DIR}/websdk_#{build_config[:version]}.zip"
  FileUtils.rm_rf zipfile if File.exists? zipfile
  Zip::ZipFile.open(zipfile, Zip::ZipFile::CREATE) do |zipfile|
    zipfile.add('js/appcelerator-lite.js',jslite)
    zipfile.add('js/appcelerator-debug.js',jsdebug)
    zipfile.add('js/appcelerator.js',jsout)
    zipfile.get_output_stream('build.yml') {|f| f.puts build_config.to_yaml }
    Find.find("#{BUILD_DIR}/src/web") do |path|
      pathname = Pathname.new(path)
      if not path.include? '.svn' and not path.include? '.DS_Store' and pathname.file?
        filename = pathname.relative_path_from(Pathname.new("#{BUILD_DIR}/src/web")).to_s
        zipfile.add(filename,path) if not filename =~ /^js(.*)\.js$/
      end
    end
    Find.find("#{BUILD_DIR}/src/common") do |path|
      pathname = Pathname.new(path)
      if not path.include? '.svn' and not path.include? '.DS_Store' and pathname.file?
        filename = pathname.relative_path_from(Pathname.new("#{BUILD_DIR}/src/common")).to_s
        zipfile.add('common/' + filename,path)
      end
    end
  end
  
  FileUtils.rm_rf web_dir
end

