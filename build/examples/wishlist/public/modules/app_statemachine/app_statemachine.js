Appcelerator.Module.Statemachine={getName:function(){return"appcelerator statemachine"},getDescription:function(){return"statemachine widget"},getVersion:function(){return 1},getSpecVersion:function(){return 1},getAuthor:function(){return"Jeff Haynie"},getModuleURL:function(){return"http://www.appcelerator.org"},isWidget:function(){return true},getWidgetName:function(){return"app:statemachine"},getAttributes:function(){return[{name:"initial",optional:true,description:"Initial state of the state machine."}]},buildWidget:function(F,O){var I=O["initial"];var B=false;var C=F.id;if(!C){throw"app:statemachine requires an ID attribute"}F.value=I||"";var N=[];for(var M=0,H=F.childNodes.length;M<H;M++){var D=F.childNodes[M];if(D.nodeType==1&&D.nodeName.toLowerCase()=="state"){var A=D.getAttribute("name");var L=D.getAttribute("if");if(I&&I==A){B=true}Appcelerator.Compiler.StateMachine.addState(C,A,null);N.push(Appcelerator.Compiler.StateMachine.compileStateCondition(A,L))}}var K=Appcelerator.Compiler.StateMachine.buildConditions(N);if(I){if(!B){throw"invalid initial state - couldn't find state: "+I+" for "+C}F.value=I;Appcelerator.Compiler.StateMachine.resetOnStateListeners();if(Appcelerator.Compiler.StateMachine.initialStateLoaders){Appcelerator.Compiler.StateMachine.initialStateLoaders.push([C,I])}}var G=null;var E={accept:function(){return K.types},acceptScope:function(P){return F.scope=="*"||P==F.scope},onMessage:function(R,T,Q,W){try{if(!G){G=K.code.toFunction();K=null}var P=W+":"+R;var V={messagetype:P,type:R,datatype:Q,direction:W,data:T};var S=G.call(V);if(S){Appcelerator.Compiler.StateMachine.fireStateMachineChange(C,S,true)}else{S=Appcelerator.Compiler.StateMachine.getActiveState(C);if(S){Appcelerator.Compiler.StateMachine.fireStateMachineChange(C,S,null)}}}catch(U){$E("Error processing message: "+W+":"+R+" - "+Object.getExceptionDetail(U))}}};Appcelerator.Util.ServiceBroker.addListener(E);var J=function(Q,R,P){if(P){F.value=R}};Appcelerator.Compiler.StateMachine.registerStateListener(C,J);Appcelerator.Compiler.StateMachine.fireOnStateListeners();Appcelerator.Compiler.addTrash(F,function(){if(J){Appcelerator.Compiler.StateMachine.unregisterStateListener(J);J=null}Appcelerator.Util.ServiceBroker.removeListener(E)});return{"position":Appcelerator.Compiler.POSITION_REPLACE,"presentation":""}}};Appcelerator.Core.registerModule("app:statemachine",Appcelerator.Module.Statemachine)